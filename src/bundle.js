/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./dom/cyclicButtonManager.ts":
/*!************************************!*\
  !*** ./dom/cyclicButtonManager.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CyclicButtonManager = void 0;\nconst elements_1 = __webpack_require__(/*! ./elements */ \"./dom/elements.ts\");\nconst localStorage_1 = __webpack_require__(/*! ./localStorage */ \"./dom/localStorage.ts\");\n// TODO: add back reset local storage callback\nconst CyclicButtonManager = ({ values, defaultValue, name, ToString = String, // toString is a built in js method\nFromString = (value) => value, OnChangeCallback = () => { } }) => {\n    const element = elements_1.elements[name]; // also display element\n    const storageKey = name;\n    const Initialise = () => {\n        const value = (0, localStorage_1.GetLocalStorageItem)(storageKey, ToString(defaultValue));\n        element.textContent = value;\n        OnChangeCallback(FromString(value));\n    };\n    Initialise();\n    const CycleCounter = () => {\n        let valueStr = element.textContent === null\n            ? ToString(defaultValue)\n            : element.textContent;\n        let value = FromString(valueStr);\n        const index = values.findIndex(other => other === value);\n        const nextIndex = (index + 1) % values.length;\n        value = values[nextIndex];\n        valueStr = ToString(value);\n        element.textContent = valueStr;\n        localStorage.setItem(storageKey, valueStr);\n        OnChangeCallback(value);\n    };\n    element.onclick = () => CycleCounter();\n};\nexports.CyclicButtonManager = CyclicButtonManager;\n\n\n//# sourceURL=webpack:///./dom/cyclicButtonManager.ts?");

/***/ }),

/***/ "./dom/elements.ts":
/*!*************************!*\
  !*** ./dom/elements.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.elements = void 0;\nconst elementIds = [\n    'canvas',\n    'toggleGrid',\n    'randomiseWorld',\n    'tileScale',\n    'displayMode'\n];\nconst GetElements = () => {\n    const elements = Object.fromEntries(elementIds.map(id => [id, document.getElementById(id)]));\n    const nullElements = Object.keys(elements).filter(id => elements[id] === null);\n    if (nullElements.length > 0) {\n        throw new Error(`Failed to find all elements by id ${nullElements}`);\n    }\n    return elements;\n};\nexports.elements = GetElements();\n\n\n//# sourceURL=webpack:///./dom/elements.ts?");

/***/ }),

/***/ "./dom/localStorage.ts":
/*!*****************************!*\
  !*** ./dom/localStorage.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GetLocalStorageItem = void 0;\nconst GetLocalStorageItem = (key, defaultValue) => {\n    const value = localStorage.getItem(key);\n    if (value === null) {\n        localStorage.setItem(key, defaultValue);\n        return defaultValue;\n    }\n    else {\n        return value;\n    }\n};\nexports.GetLocalStorageItem = GetLocalStorageItem;\n\n\n//# sourceURL=webpack:///./dom/localStorage.ts?");

/***/ }),

/***/ "./dom/main.ts":
/*!*********************!*\
  !*** ./dom/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InitialiseDom = void 0;\nconst cursor_1 = __webpack_require__(/*! ../game/cursor */ \"./game/cursor.ts\");\nconst main_1 = __webpack_require__(/*! ../game/main */ \"./game/main.ts\");\nconst cyclicButtonManager_1 = __webpack_require__(/*! ./cyclicButtonManager */ \"./dom/cyclicButtonManager.ts\");\nconst elements_1 = __webpack_require__(/*! ./elements */ \"./dom/elements.ts\");\nconst InitialiseDom = (world, renderer, game) => {\n    (0, cyclicButtonManager_1.CyclicButtonManager)({\n        values: ['Grid On', 'Grid Off'],\n        defaultValue: 'Grid On',\n        name: 'toggleGrid',\n        OnChangeCallback: (value) => {\n            const showGrid = value === 'Grid On';\n            game.showGrid = showGrid;\n        }\n    });\n    (0, cyclicButtonManager_1.CyclicButtonManager)({\n        values: [1, 2, 4, 8],\n        defaultValue: 4,\n        name: 'tileScale',\n        OnChangeCallback: (scale) => {\n            renderer.SetScale(scale);\n        },\n        ToString: String,\n        FromString: Number\n    });\n    (0, cyclicButtonManager_1.CyclicButtonManager)({\n        values: ['Normal', 'Debug'],\n        defaultValue: 'Normal',\n        name: 'displayMode',\n        OnChangeCallback: (value) => {\n            game.displayMode = value;\n        }\n    });\n    elements_1.elements.canvas.addEventListener('mousemove', (event) => {\n        const rect = elements_1.elements.canvas.getBoundingClientRect();\n        const canvasPosition = {\n            x: (event.offsetX / rect.width) * elements_1.elements.canvas.width,\n            y: (event.offsetY / rect.height) * elements_1.elements.canvas.height\n        };\n        const worldPosition = (0, cursor_1.CalculateCursorWorldPosition)(renderer, world, canvasPosition);\n        world.SetCursorWorldPosition(worldPosition);\n    });\n    elements_1.elements.randomiseWorld.onclick = () => {\n        world.GenerateTiles({ landAxialRadius: 6, worldAxialRadius: 12 });\n        game.playerPosition = (0, main_1.RandomisePlayerPosition)(world);\n    };\n};\nexports.InitialiseDom = InitialiseDom;\n\n\n//# sourceURL=webpack:///./dom/main.ts?");

/***/ }),

/***/ "./game/cursor.ts":
/*!************************!*\
  !*** ./game/cursor.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CalculateCursorWorldPosition = void 0;\nconst pos_3d_1 = __webpack_require__(/*! ../miscellaneous/pos_3d */ \"./miscellaneous/pos_3d.ts\");\nconst main_1 = __webpack_require__(/*! ../world/main */ \"./world/main.ts\");\nconst CalculateCursorWorldPosition = (renderer, world, canvasPosition) => {\n    const tiles = world.GetTiles();\n    for (let wz = 4; wz >= 0; wz--) {\n        const fw = renderer.CanvasToWorldPosition({\n            canvasPosition,\n            wz\n        }); // floating point world position\n        const w = (0, pos_3d_1.Pos3dScalarOperation)(fw, Math.round);\n        const tile = tiles.find(tile => (0, pos_3d_1.Pos3dEquals)(w, (0, pos_3d_1.Pos3dScalarOperation)(tile.p, Math.round)));\n        if (tile !== undefined && main_1.SurfaceTiles.includes(tile.tileType)) {\n            return tile.p;\n        }\n    }\n    return null;\n};\nexports.CalculateCursorWorldPosition = CalculateCursorWorldPosition;\n\n\n//# sourceURL=webpack:///./game/cursor.ts?");

/***/ }),

/***/ "./game/main.ts":
/*!**********************!*\
  !*** ./game/main.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Render = exports.RandomisePlayerPosition = void 0;\nconst utils_1 = __webpack_require__(/*! ../renderer/utils */ \"./renderer/utils.ts\");\nconst types_1 = __webpack_require__(/*! ../world/types */ \"./world/types.ts\");\nconst RandomisePlayerPosition = (world) => {\n    for (let i = 0; i < 100; i++) {\n        const p = {\n            x: Math.floor(Math.random() * 6) - 3,\n            y: Math.floor(Math.random() * 6) - 3\n        };\n        const tile = world.GetSurfaceTile(p);\n        if (tile !== undefined && tile.tileType !== types_1.TileType.water) {\n            return { x: tile.p.x, y: tile.p.y, z: tile.p.z + 1 };\n        }\n    }\n    console.warn('Failed to find valid tile for player to stand on');\n    return { x: 0, y: 0, z: 0 };\n};\nexports.RandomisePlayerPosition = RandomisePlayerPosition;\nconst Render = (time, renderer, world, tiles, game) => {\n    // renderer.ClearCanvas()\n    renderer.FillCanvas('hsl(204, 78%, 85%)');\n    // draw tiles\n    const rTiles = [...tiles];\n    // draw cursor\n    const cursorWorldPosition = world.GetCursorWorldPosition();\n    if (cursorWorldPosition !== null) {\n        const cursorTile = (0, utils_1.CreateRenderTile)({\n            worldPosition: cursorWorldPosition,\n            tilename: 'cursor'\n        });\n        rTiles.push(cursorTile);\n    }\n    // draw player\n    const playerTile = (0, utils_1.CreateRenderTile)({\n        worldPosition: game.playerPosition,\n        tilename: `sword_man:frame-${time % 1000 < 500 ? 0 : 1}`\n    });\n    rTiles.push(playerTile);\n    // sort tiles for render (move into renderer)\n    rTiles.sort((a, b) => {\n        const aw = a.worldPosition.x + a.worldPosition.y;\n        const bw = b.worldPosition.x + b.worldPosition.y;\n        if (aw === bw) {\n            // if tiles on same x,y, render from bottom to top\n            return a.worldPosition.z - b.worldPosition.z;\n        }\n        // render from back to front (negative to positive x, y)\n        return aw - bw;\n    });\n    for (const t of rTiles) {\n        renderer.DrawIsometricTile(t);\n    }\n    // draw grid\n    if (game.showGrid) {\n        renderer.DrawIsometricGrid();\n    }\n};\nexports.Render = Render;\n\n\n//# sourceURL=webpack:///./game/main.ts?");

/***/ }),

/***/ "./game/tileset.ts":
/*!*************************!*\
  !*** ./game/tileset.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenerateRenderTiles = void 0;\nconst random_noise_1 = __webpack_require__(/*! ../miscellaneous/random_noise */ \"./miscellaneous/random_noise.ts\");\nconst single_log_1 = __webpack_require__(/*! ../miscellaneous/single_log */ \"./miscellaneous/single_log.ts\");\nconst tileset_1 = __webpack_require__(/*! ../renderer/tileset */ \"./renderer/tileset.ts\");\nconst utils_1 = __webpack_require__(/*! ../renderer/utils */ \"./renderer/utils.ts\");\nconst types_1 = __webpack_require__(/*! ../world/types */ \"./world/types.ts\");\nconst types_2 = __webpack_require__(/*! ./types */ \"./game/types.ts\");\nconst worldToRenderTileName = new Map([\n    [types_1.TileType.grass, 'grass'],\n    [types_1.TileType.dryGrass, 'dry_grass'],\n    [types_1.TileType.dirt, 'dirt'],\n    [types_1.TileType.stone, 'stone'],\n    [types_1.TileType.lava, 'lava'],\n    [types_1.TileType.sand, 'sand'],\n    [types_1.TileType.plant, 'flower_a'],\n    [types_1.TileType.cactus, 'flowering_small_cactus'],\n    [types_1.TileType.smallStones, 'small_stones'],\n    [types_1.TileType.tinyStones, 'tiny_stones'],\n    [types_1.TileType.largeStones, 'large_stones'],\n    [types_1.TileType.shortGrass, 'short_grass'],\n    [types_1.TileType.shortDryGrass, 'short_dry_grass'],\n    [types_1.TileType.longDryGrass, 'long_dry_grass'],\n    [types_1.TileType.longGrass, 'long_grass'],\n    [types_1.TileType.oakTrunk, 'oak_trunk'],\n    [types_1.TileType.poppy, 'poppy'],\n    [types_1.TileType.daisies, 'daisies'],\n    [types_1.TileType.smallBush, 'small_bush'],\n    [types_1.TileType.mediumBush, 'medium_bush'],\n    [types_1.TileType.sunflowers, 'sunflowers']\n]);\nconst worldToRenderMultiTileName = new Map([\n    [types_1.TileType.oakTree, 'oak_tree'],\n    [types_1.TileType.palmTree, 'palm_tree']\n]);\nconst GetTileVariant = ({ name, p, blockParts = [], onlyParts = [] }) => {\n    const n = (0, random_noise_1.SurfaceNoise)(p);\n    const variants = Object.keys(tileset_1.TILENAME_TO_TILESET_INDEX_MAP).filter(key => {\n        const parts = key.split(':');\n        const hasBlockedParts = blockParts.some(blockPart => parts.some(part => part.startsWith(blockPart)));\n        if (hasBlockedParts)\n            return false;\n        const hasOnlyParts = onlyParts.every(onlyPart => parts.some(part => part.startsWith(onlyPart)));\n        if (!hasOnlyParts)\n            return false;\n        return parts[0] === name;\n    });\n    if (variants.length === 0) {\n        throw new Error(`Cannot find variant ${name}`);\n    }\n    const chosenVariant = variants[Math.floor(variants.length * n)];\n    return chosenVariant;\n};\nconst GetAnimatedFrame = (framePeriods, time, p) => {\n    const n = (0, random_noise_1.SurfaceNoise)(p);\n    let totalPeriod = 0;\n    for (let i = 0; i < framePeriods.length; i++) {\n        totalPeriod += framePeriods[i];\n    }\n    let wrappedTime = (time + Math.floor(n * totalPeriod)) % totalPeriod;\n    for (let i = 0; i < framePeriods.length; i++) {\n        wrappedTime -= framePeriods[i];\n        if (wrappedTime <= 0) {\n            return i;\n        }\n    }\n    console.log('GetAnimatedFrame got to end of loop without selecting a frame');\n    return framePeriods.length - 1;\n};\nconst CreateMultiTileRenderTiles = ({ name, worldPosition }) => {\n    const rTiles = [];\n    const relTilePositions = Object.keys(tileset_1.TILENAME_TO_TILESET_INDEX_MAP)\n        .filter(key => {\n        const parts = key.split(':');\n        return parts[0] === name;\n    })\n        .map(key => {\n        const parts = key.split(':');\n        const subpart = parts.find(part => part.startsWith('sub-'));\n        if (subpart === undefined) {\n            throw new Error(`Expected ${name} to be multiple tiles ${key}`);\n        }\n        const [x, y] = subpart.slice(4).split('_');\n        return { x: Number(x), y: Number(y) };\n    });\n    let maxP = { x: 0, y: 0 };\n    for (const p of relTilePositions) {\n        if (maxP.y < p.y) {\n            maxP.y = p.y;\n        }\n        if (maxP.x < p.x) {\n            maxP.x = p.x;\n        }\n    }\n    // assumes multi-tile has origin at horizontal centre\n    // and vertically at bottom\n    const xOffset = Math.floor(maxP.x / 2);\n    for (const p of relTilePositions) {\n        const subKey = `sub-${p.x}_${p.y}`;\n        rTiles.push((0, utils_1.CreateRenderTile)({\n            worldPosition: {\n                x: worldPosition.x + xOffset - p.x,\n                y: worldPosition.y - xOffset + p.x,\n                z: worldPosition.z + maxP.y - p.y - 1\n            },\n            tilename: GetTileVariant({\n                name,\n                p: worldPosition,\n                onlyParts: [subKey]\n            })\n        }));\n    }\n    return rTiles;\n};\nconst GenerateRenderTiles = ({ worldTiles, time, game }) => {\n    const rTiles = []; // render tiles\n    for (const wTile of worldTiles) {\n        if (worldToRenderTileName.has(wTile.tileType)) {\n            const name = worldToRenderTileName.get(wTile.tileType);\n            rTiles.push((0, utils_1.CreateRenderTile)({\n                worldPosition: wTile.p,\n                tilename: GetTileVariant({\n                    name,\n                    p: wTile.p,\n                    blockParts: ['edge-']\n                })\n            }));\n        }\n        else if (wTile.tileType === types_1.TileType.water) {\n            rTiles.push((0, utils_1.CreateRenderTile)({\n                worldPosition: wTile.p,\n                tilename: `water:frame-${GetAnimatedFrame([8000, 8000, 8000], time, wTile.p)}`\n            }));\n        }\n        else if (wTile.tileType === types_1.TileType.orchid) {\n            const frameKey = `frame-${GetAnimatedFrame([20000, 2000], time, wTile.p)}`;\n            rTiles.push((0, utils_1.CreateRenderTile)({\n                worldPosition: wTile.p,\n                tilename: GetTileVariant({\n                    name: 'orchid',\n                    p: wTile.p,\n                    onlyParts: [frameKey]\n                })\n            }));\n        }\n        else if (wTile.tileType.split(':').some(part => part.startsWith('edge-'))) {\n            const parts = wTile.tileType.split(':');\n            const edgeKey = parts.find(part => part.startsWith('edge-'));\n            rTiles.push((0, utils_1.CreateRenderTile)({\n                worldPosition: wTile.p,\n                tilename: GetTileVariant({\n                    name: parts[0],\n                    p: wTile.p,\n                    onlyParts: [edgeKey]\n                })\n            }));\n        }\n        else if (worldToRenderMultiTileName.has(wTile.tileType)) {\n            rTiles.push(...CreateMultiTileRenderTiles({\n                name: worldToRenderMultiTileName.get(wTile.tileType),\n                worldPosition: wTile.p\n            }));\n        }\n        else {\n            (0, single_log_1.warnOnce)(`missing-tile-type-${wTile.tileType}`, `This tile type is not being rendered ${wTile.tileType}`);\n        }\n    }\n    if (game.displayMode === types_2.DisplayMode.Debug) {\n        const debugTiles = [];\n        const uniquePositions = new Set();\n        for (let rTile of rTiles) {\n            const p = rTile.worldPosition;\n            uniquePositions.add(`${p.x} ${p.y} ${p.z}`);\n        }\n        for (const pStr of uniquePositions) {\n            const [x, y, z] = pStr.split(' ').map(Number);\n            const p = { x, y, z };\n            // console.log(rTile.worldPosition.z)\n            const variant = p.z < 0 ? 5 + (Math.floor(p.z) % 5) : Math.floor(p.z) % 5;\n            debugTiles.push((0, utils_1.CreateRenderTile)({\n                worldPosition: p,\n                tilename: `debug:mvar-${variant}`\n            }));\n        }\n        rTiles.push(...debugTiles);\n    }\n    return rTiles;\n};\nexports.GenerateRenderTiles = GenerateRenderTiles;\n\n\n//# sourceURL=webpack:///./game/tileset.ts?");

/***/ }),

/***/ "./game/types.ts":
/*!***********************!*\
  !*** ./game/types.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DisplayMode = void 0;\nvar DisplayMode;\n(function (DisplayMode) {\n    DisplayMode[\"Normal\"] = \"Normal\";\n    DisplayMode[\"Debug\"] = \"Debug\";\n})(DisplayMode || (exports.DisplayMode = DisplayMode = {}));\n\n\n//# sourceURL=webpack:///./game/types.ts?");

/***/ }),

/***/ "./main.ts":
/*!*****************!*\
  !*** ./main.ts ***!
  \*****************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst main_1 = __webpack_require__(/*! ./dom/main */ \"./dom/main.ts\");\nconst main_2 = __webpack_require__(/*! ./game/main */ \"./game/main.ts\");\nconst tileset_1 = __webpack_require__(/*! ./game/tileset */ \"./game/tileset.ts\");\nconst types_1 = __webpack_require__(/*! ./game/types */ \"./game/types.ts\");\nconst main_3 = __webpack_require__(/*! ./renderer/main */ \"./renderer/main.ts\");\nconst main_4 = __webpack_require__(/*! ./world/main */ \"./world/main.ts\");\nconst types_2 = __webpack_require__(/*! ./world/types */ \"./world/types.ts\");\nconsole.log('Isometric');\nconst TestWorld = () => {\n    return [\n        {\n            p: { x: 0, y: 0, z: 0.5 },\n            tileType: types_2.TileType.grass\n        },\n        {\n            p: { x: 0, y: 0, z: 0 },\n            tileType: types_2.TileType.grass\n        }\n    ];\n};\nconst main = async () => {\n    const world = (0, main_4.CreateWorld)();\n    // world.SetTiles(TestWorld())\n    world.GenerateTiles({ landAxialRadius: 6, worldAxialRadius: 12 });\n    const renderer = await (0, main_3.CreateRenderer)();\n    const game = {\n        showGrid: false,\n        playerPosition: (0, main_2.RandomisePlayerPosition)(world),\n        displayMode: types_1.DisplayMode.Normal\n    };\n    (0, main_1.InitialiseDom)(world, renderer, game);\n    let frameCount = 0;\n    let lastTime = performance.now();\n    const RenderLoop = () => {\n        requestAnimationFrame((time) => {\n            frameCount++;\n            // Calculate elapsed time\n            const elapsedTime = time - lastTime;\n            if (elapsedTime >= 2000) {\n                const fps = (frameCount / elapsedTime) * 1000; // Frames per second\n                console.log(`Average FPS: ${fps.toFixed(2)}`);\n                frameCount = 0;\n                lastTime = time;\n            }\n            const rTiles = (0, tileset_1.GenerateRenderTiles)({\n                worldTiles: world.GetTiles(),\n                time,\n                game\n            });\n            (0, main_2.Render)(time, renderer, world, rTiles, game);\n            RenderLoop();\n        });\n    };\n    RenderLoop();\n};\nmain();\n\n\n//# sourceURL=webpack:///./main.ts?");

/***/ }),

/***/ "./miscellaneous/math.ts":
/*!*******************************!*\
  !*** ./miscellaneous/math.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenIntsToFloat = exports.linInterp = exports.clamp = void 0;\nconst clamp = (min, max, value) => {\n    return Math.max(min, Math.min(max, value));\n};\nexports.clamp = clamp;\nconst linInterp = (i0, i1, v0, v1, v) => {\n    return i0 + (i1 - i0) * ((v - v0) / (v1 - v0));\n};\nexports.linInterp = linInterp;\nconst GenIntsToFloat = (f) => {\n    const values = [];\n    for (let x = 0; x < f; x++) {\n        values.push(x);\n    }\n    values.push(f);\n    return values;\n};\nexports.GenIntsToFloat = GenIntsToFloat;\n\n\n//# sourceURL=webpack:///./miscellaneous/math.ts?");

/***/ }),

/***/ "./miscellaneous/perlin_noise.ts":
/*!***************************************!*\
  !*** ./miscellaneous/perlin_noise.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NOISE_MANAGER = exports.NoiseManager = exports.CreatePerlinNoise = void 0;\nconst CreatePerlinNoise = () => {\n    const _p = [];\n    const _permutation = [];\n    const initialise = () => {\n        // Initialize the permutation table\n        for (let i = 0; i < 256; i++) {\n            _p[i] = Math.floor(Math.random() * 256);\n        }\n        // Duplicate the permutation table\n        for (let i = 0; i < 256; i++) {\n            _permutation[i] = _p[i % 256];\n        }\n    };\n    // Fade function to smooth the interpolation\n    const fade = (t) => {\n        return t * t * t * (t * (t * 6 - 15) + 10);\n    };\n    // Dot product of the gradient and the distance vector\n    const grad = (hash, x, y) => {\n        const h = hash & 15; // Determine which gradient to use\n        const u = h < 8 ? x : y;\n        const v = h < 4 ? y : h === 12 || h === 14 ? x : 0;\n        return (h & 1 ? -u : u) + (h & 2 ? -v : v);\n    };\n    const lerp = (a, b, t) => {\n        return a + t * (b - a);\n    };\n    const noise = (x, y) => {\n        const X = Math.floor(x) & 255; // Calculate grid cell coordinates\n        const Y = Math.floor(y) & 255;\n        x -= Math.floor(x); // Relative position in grid cell\n        y -= Math.floor(y);\n        const u = fade(x); // Fade the x coordinate\n        const v = fade(y); // Fade the y coordinate\n        // Hash coordinates of the 4 corners\n        const a = _permutation[X] + Y;\n        const aa = _permutation[a];\n        const ab = _permutation[a + 1];\n        const b = _permutation[X + 1] + Y;\n        const ba = _permutation[b];\n        const bb = _permutation[b + 1];\n        // Interpolate between gradients at the four corners\n        const x1 = lerp(grad(aa, x, y), grad(ba, x - 1, y), u);\n        const x2 = lerp(grad(ab, x, y - 1), grad(bb, x - 1, y - 1), u);\n        return lerp(x1, x2, v); // Final interpolation\n    };\n    const layeredNoise = ({ x, y, octaves = 1 }) => {\n        let total = 0;\n        let frequency = 1;\n        let amplitude = 1;\n        for (let i = 0; i < octaves; i++) {\n            total += noise(x * frequency, y * frequency) * amplitude;\n            frequency *= 2;\n            amplitude *= 0.5;\n        }\n        return total;\n    };\n    initialise();\n    return {\n        noise: layeredNoise\n    };\n};\nexports.CreatePerlinNoise = CreatePerlinNoise;\nconst NoiseManager = () => {\n    const noiseCollection = new Map([]);\n    const GetNoise = (key) => {\n        if (!noiseCollection.has(key)) {\n            noiseCollection.set(key, (0, exports.CreatePerlinNoise)());\n        }\n        return noiseCollection.get(key);\n    };\n    return {\n        GetNoise\n    };\n};\nexports.NoiseManager = NoiseManager;\n// singleton...\nexports.NOISE_MANAGER = (0, exports.NoiseManager)();\n\n\n//# sourceURL=webpack:///./miscellaneous/perlin_noise.ts?");

/***/ }),

/***/ "./miscellaneous/pos_3d.ts":
/*!*********************************!*\
  !*** ./miscellaneous/pos_3d.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Pos3dLerp = exports.Pos3dCrossProduct = exports.Pos3dDotProduct = exports.Pos3dEquals = exports.Pos3dNormalize = exports.Pos3dMagnitude = exports.Pos3dDistanceBetween = exports.Pos3dDivide = exports.Pos3dMultiply = exports.Pos3dSubtract = exports.Pos3dAdd = exports.Pos3dScalarOperation = exports.Pos3dFromScalar = exports.Pos3dZero = void 0;\nconst Pos3dZero = () => {\n    return (0, exports.Pos3dFromScalar)(0);\n};\nexports.Pos3dZero = Pos3dZero;\nconst Pos3dFromScalar = (scalar) => {\n    return { x: scalar, y: scalar, z: scalar };\n};\nexports.Pos3dFromScalar = Pos3dFromScalar;\nconst Pos3dScalarOperation = (p, operation) => {\n    return { x: operation(p.x), y: operation(p.y), z: operation(p.z) };\n};\nexports.Pos3dScalarOperation = Pos3dScalarOperation;\nconst Pos3dAdd = (a, b) => {\n    if (typeof b === 'number') {\n        return { x: a.x + b, y: a.y + b, z: a.z + b };\n    }\n    else {\n        return { x: a.x + b.x, y: a.y + b.y, z: a.z + b.z };\n    }\n};\nexports.Pos3dAdd = Pos3dAdd;\nconst Pos3dSubtract = (a, b) => {\n    if (typeof b === 'number') {\n        return { x: a.x - b, y: a.y - b, z: a.z - b };\n    }\n    else {\n        return { x: a.x - b.x, y: a.y - b.y, z: a.z - b.z };\n    }\n};\nexports.Pos3dSubtract = Pos3dSubtract;\nconst Pos3dMultiply = (a, b) => {\n    if (typeof b === 'number') {\n        return { x: a.x * b, y: a.y * b, z: a.z * b };\n    }\n    else {\n        return { x: a.x * b.x, y: a.y * b.y, z: a.z * b.z };\n    }\n};\nexports.Pos3dMultiply = Pos3dMultiply;\nconst Pos3dDivide = (a, b) => {\n    if (typeof b === 'number') {\n        return { x: a.x / b, y: a.y / b, z: a.z / b };\n    }\n    else {\n        return { x: a.x / b.x, y: a.y / b.y, z: a.z / b.z };\n    }\n};\nexports.Pos3dDivide = Pos3dDivide;\nconst Pos3dDistanceBetween = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2) + Math.pow(b.z - a.z, 2));\nexports.Pos3dDistanceBetween = Pos3dDistanceBetween;\nconst Pos3dMagnitude = (p) => Math.sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\nexports.Pos3dMagnitude = Pos3dMagnitude;\nconst Pos3dNormalize = (p) => {\n    const mag = (0, exports.Pos3dMagnitude)(p);\n    return mag === 0 ? (0, exports.Pos3dZero)() : (0, exports.Pos3dDivide)(p, mag);\n};\nexports.Pos3dNormalize = Pos3dNormalize;\nconst Pos3dEquals = (a, b) => a.x === b.x && a.y === b.y && a.z === b.z;\nexports.Pos3dEquals = Pos3dEquals;\nconst Pos3dDotProduct = (a, b) => a.x * b.x + a.y * b.y + a.z * b.z;\nexports.Pos3dDotProduct = Pos3dDotProduct;\nconst Pos3dCrossProduct = (a, b) => {\n    return {\n        x: a.y * b.z - a.z * b.y,\n        y: a.z * b.x - a.x * b.z,\n        z: a.x * b.y - a.y * b.x\n    };\n};\nexports.Pos3dCrossProduct = Pos3dCrossProduct;\nconst Pos3dLerp = (a, b, t) => ({\n    x: a.x + (b.x - a.x) * t,\n    y: a.y + (b.y - a.y) * t,\n    z: a.z + (b.z - a.z) * t\n});\nexports.Pos3dLerp = Pos3dLerp;\n\n\n//# sourceURL=webpack:///./miscellaneous/pos_3d.ts?");

/***/ }),

/***/ "./miscellaneous/random_noise.ts":
/*!***************************************!*\
  !*** ./miscellaneous/random_noise.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SurfaceNoise = exports.CreateRandomNoise2D = void 0;\nconst CreateRandomNoise2D = () => {\n    const values = [];\n    const n = 13;\n    for (let y = -n; y < n; y++) {\n        for (let x = -n; x < n; x++) {\n            values.push(Math.random());\n        }\n    }\n    return (p) => {\n        return values[p.x + n + (p.y + n) * (2 * n)];\n    };\n};\nexports.CreateRandomNoise2D = CreateRandomNoise2D;\n// singleton...\nexports.SurfaceNoise = (0, exports.CreateRandomNoise2D)();\n\n\n//# sourceURL=webpack:///./miscellaneous/random_noise.ts?");

/***/ }),

/***/ "./miscellaneous/single_log.ts":
/*!*************************************!*\
  !*** ./miscellaneous/single_log.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.logOnce = exports.warnOnce = void 0;\nconst WARNINGS = new Set();\nconst LOGS = new Set();\nconst warnOnce = (key, ...data) => {\n    if (!WARNINGS.has(key)) {\n        WARNINGS.add(key);\n        console.warn(...data);\n    }\n};\nexports.warnOnce = warnOnce;\nconst logOnce = (key, ...data) => {\n    if (!LOGS.has(key)) {\n        LOGS.add(key);\n        console.log(...data);\n    }\n};\nexports.logOnce = logOnce;\n\n\n//# sourceURL=webpack:///./miscellaneous/single_log.ts?");

/***/ }),

/***/ "./miscellaneous/weighted_random.ts":
/*!******************************************!*\
  !*** ./miscellaneous/weighted_random.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WeightedRandomCallbacks = exports.WeightedRandom = void 0;\nconst single_log_1 = __webpack_require__(/*! ./single_log */ \"./miscellaneous/single_log.ts\");\nconst WeightedRandom = (r, weights) => {\n    let t = 0;\n    for (let i = 0; i < weights.length; i++) {\n        t += weights[i];\n        if (r < t) {\n            return i;\n        }\n    }\n    return weights.length;\n};\nexports.WeightedRandom = WeightedRandom;\nconst WeightedRandomCallbacks = (r, weightedCallbacks) => {\n    let t = 0;\n    for (let i = 0; i < weightedCallbacks.length; i++) {\n        const wc = weightedCallbacks[i];\n        t += wc.weight;\n    }\n    if (t.toFixed(3) !== '1.000') {\n        (0, single_log_1.warnOnce)('WeightedRandomCallbacks', `total weights not equal to 1.000: ${t}`);\n    }\n    t = 0;\n    for (let i = 0; i < weightedCallbacks.length; i++) {\n        const wc = weightedCallbacks[i];\n        t += wc.weight;\n        if (r < t) {\n            wc.callback();\n            return;\n        }\n    }\n    weightedCallbacks.at(-1)?.callback();\n};\nexports.WeightedRandomCallbacks = WeightedRandomCallbacks;\n\n\n//# sourceURL=webpack:///./miscellaneous/weighted_random.ts?");

/***/ }),

/***/ "./renderer/main.ts":
/*!**************************!*\
  !*** ./renderer/main.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CreateRenderer = exports.LoadImage = void 0;\nconst elements_1 = __webpack_require__(/*! ../dom/elements */ \"./dom/elements.ts\");\nconst types_1 = __webpack_require__(/*! ./types */ \"./renderer/types.ts\");\nconst LoadImage = async (src) => {\n    const image = new Image();\n    image.src = src;\n    return new Promise((resolve, reject) => {\n        image.onload = () => resolve(image);\n        image.onerror = err => reject(new Error(`Failed to load image at ${src}`));\n    });\n};\nexports.LoadImage = LoadImage;\nconst GetContext = (canvas) => {\n    let newCtx = canvas.getContext('2d');\n    if (newCtx === null) {\n        throw new Error('Failed to get 2D context');\n    }\n    return newCtx;\n};\nconst lowestPowerOf2 = (num) => {\n    const lower = 2 ** Math.floor(Math.log2(num));\n    return lower;\n};\nconst CreateRenderer = async () => {\n    const canvas = elements_1.elements.canvas;\n    // Initialise\n    let ctx = GetContext(canvas);\n    let [width, height] = [0, 0];\n    const sizeCanvas = () => {\n        // console.log('canvas onresize')\n        canvas.width = lowestPowerOf2(canvas.clientWidth); //512 // Math.floor(canvas.clientWidth / 16) * 16\n        canvas.height = canvas.width;\n        width = canvas.width;\n        height = canvas.height;\n        // console.log({ width, height })\n        ctx = GetContext(canvas);\n        ctx.imageSmoothingEnabled = false;\n    };\n    sizeCanvas();\n    window.addEventListener('resize', sizeCanvas);\n    const SetScale = (scale) => {\n        _scale = scale;\n        _dts = sts * _scale;\n    };\n    let _scale = 4;\n    const sts = 16; // source tile size\n    let _dts = sts * _scale; // destination tile size\n    const tileSets = new Map([\n        [types_1.TileSet.main, await (0, exports.LoadImage)('assets/tileset.png')]\n    ]);\n    // Member Functions\n    const DrawLine = (x0, y0, x1, y1) => {\n        ctx.beginPath();\n        ctx.moveTo(x0, y0);\n        ctx.lineTo(x1, y1);\n        ctx.stroke();\n    };\n    const DrawIsometricGrid = () => {\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = 'hsla(0, 0%, 80%, 0.5)';\n        for (let x = 0; x < width; x += _dts) {\n            DrawLine(x, 0, x, height);\n        }\n        for (let y = 0; y < height; y += _dts) {\n            DrawLine(0, y, width, y);\n        }\n        ctx.strokeStyle = 'hsl(0, 100%, 100%, 0.5)';\n        for (let x = _dts / 2; x < width; x += _dts) {\n            DrawLine(x, 0, x, height);\n        }\n        for (let y = _dts / 2; y < height; y += _dts) {\n            DrawLine(0, y, width, y);\n        }\n        for (let y = -_dts; y < height; y += _dts) {\n            for (let x = -_dts; x < width; x += _dts) {\n                ctx.strokeStyle = 'hsla(200, 100%, 80%, 0.6)';\n                DrawLine(x, y, x + 2 * _dts, y + _dts);\n                ctx.strokeStyle = 'hsla(100, 100%, 80%, 0.6)';\n                DrawLine(x, y + _dts, x + 2 * _dts, y);\n            }\n        }\n    };\n    const WorldToCanvasPosition = ({ x, y, z }) => {\n        const p0 = {\n            // destination x & y origin (centre)\n            x: (width - _dts) / 2,\n            y: (height - _dts) / 2\n        };\n        const p = {\n            x: p0.x - (x * _dts) / 2 + (y * _dts) / 2,\n            y: p0.y + (x * _dts) / 4 + (y * _dts) / 4 - (z * _dts) / 2\n        };\n        return p;\n    };\n    const DrawIsometricTile = (tile) => {\n        //  /  \\\n        // x    y\n        // w = world x, y & z\n        // ti, tj = tile index in x & y\n        const [sw, sh] = [sts, sts]; // source width & height\n        const [sx, sy] = [tile.tileIndex.x * sw, tile.tileIndex.y * sh]; // source x & y\n        const [dw, dh] = [sw * _scale, sh * _scale]; // destination width & height\n        const [dx0, dy0] = [\n            // destination x & y origin (centre)\n            (width - _dts) / 2,\n            (height - _dts) / 2\n        ];\n        const [dx, dy] = [\n            // destination x & y\n            dx0 -\n                (tile.worldPosition.x * _dts) / 2 +\n                (tile.worldPosition.y * _dts) / 2,\n            dy0 +\n                (tile.worldPosition.x * _dts) / 4 +\n                (tile.worldPosition.y * _dts) / 4 -\n                (tile.worldPosition.z * _dts) / 2\n        ];\n        const d = WorldToCanvasPosition(tile.worldPosition);\n        const image = tileSets.get(tile.tileset);\n        if (image === undefined) {\n            throw new Error(`Tileset undefined ${tile.tileset}`);\n        }\n        ctx.drawImage(image, sx, sy, sw, sh, d.x, d.y, dw, dh);\n    };\n    const CanvasToWorldPosition = ({ canvasPosition, wz }) => {\n        // EQ.1\n        // _x =  p0.x - (x * dts) / 2 + (y * dts) / 2,\n        // 2/dts * (_x - p0.x)  = - x + y\n        // EQ.2\n        // _y = p0.y + (x * dts) / 4 + (y * dts) / 4 - (z * dts) / 2\n        // 4/dts * (_y - p0.y) + 2*z = x + y\n        // 2*y = EQ.1 + EQ.2\n        // 2*y = 2/dts * (_x - p0.x) + 4/dts * (_y - p0.y) + 2*z\n        // y =  1/dts * (_x - p0.x) + 2/dts * (_y - p0.y) + z\n        // y = 1/dts * (_x - p0.x + 2 * (_y - p0.y)) + z\n        // 2*x = - EQ.1 + EQ.2\n        // 2*x = - 2/dts * (_x - p0.x) + 4/dts * (_y - p0.y) + 2*z\n        // x = - 1/dts * (_x - p0.x) + 2/dts * (_y - p0.y) + z\n        // x = 1/dts * (p0.x - _x + 2 * (_y - p0.y)) + z\n        const cx = canvasPosition.x - _dts / 2;\n        const cy = canvasPosition.y - _dts / 2;\n        const p0 = {\n            // destination x & y origin (centre)\n            x: (width - _dts) / 2,\n            y: (height - _dts) / 2\n        };\n        // console.log(canvasPosition, p0)\n        const p = {\n            x: (1 / _dts) * (p0.x - cx + 2 * (cy - p0.y)) + wz + 0.5,\n            y: (1 / _dts) * (cx - p0.x + 2 * (cy - p0.y)) + wz + 0.5,\n            z: wz\n        };\n        return p;\n    };\n    const ClearCanvas = () => {\n        ctx.clearRect(0, 0, width, height);\n    };\n    const FillCanvas = (fillStyle) => {\n        ctx.fillStyle = fillStyle;\n        ctx.fillRect(0, 0, width, height);\n    };\n    return {\n        CanvasToWorldPosition,\n        ClearCanvas,\n        FillCanvas,\n        DrawIsometricTile,\n        DrawIsometricGrid,\n        SetScale\n    };\n};\nexports.CreateRenderer = CreateRenderer;\n\n\n//# sourceURL=webpack:///./renderer/main.ts?");

/***/ }),

/***/ "./renderer/tileset.ts":
/*!*****************************!*\
  !*** ./renderer/tileset.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TILENAME_TO_TILESET_INDEX_MAP = void 0;\nexports.TILENAME_TO_TILESET_INDEX_MAP = {\n    \"cursor\": {\n        \"x\": 0,\n        \"y\": 0\n    },\n    \"daisies:color-0\": {\n        \"x\": 1,\n        \"y\": 0\n    },\n    \"daisies:color-1\": {\n        \"x\": 2,\n        \"y\": 0\n    },\n    \"daisies:color-2\": {\n        \"x\": 3,\n        \"y\": 0\n    },\n    \"daisies:color-3\": {\n        \"x\": 4,\n        \"y\": 0\n    },\n    \"daisies:color-0:lr_flip\": {\n        \"x\": 5,\n        \"y\": 0\n    },\n    \"daisies:color-1:lr_flip\": {\n        \"x\": 6,\n        \"y\": 0\n    },\n    \"daisies:color-2:lr_flip\": {\n        \"x\": 7,\n        \"y\": 0\n    },\n    \"daisies:color-3:lr_flip\": {\n        \"x\": 8,\n        \"y\": 0\n    },\n    \"debug:mvar-0\": {\n        \"x\": 9,\n        \"y\": 0\n    },\n    \"debug:mvar-1\": {\n        \"x\": 10,\n        \"y\": 0\n    },\n    \"debug:mvar-2\": {\n        \"x\": 11,\n        \"y\": 0\n    },\n    \"debug:mvar-3\": {\n        \"x\": 12,\n        \"y\": 0\n    },\n    \"debug:mvar-4\": {\n        \"x\": 13,\n        \"y\": 0\n    },\n    \"dirt:rot-0\": {\n        \"x\": 0,\n        \"y\": 1\n    },\n    \"dirt:rot-1\": {\n        \"x\": 1,\n        \"y\": 1\n    },\n    \"dirt:rot-2\": {\n        \"x\": 2,\n        \"y\": 1\n    },\n    \"dirt:rot-3\": {\n        \"x\": 3,\n        \"y\": 1\n    },\n    \"dirt:rot-0:edge-px\": {\n        \"x\": 4,\n        \"y\": 1\n    },\n    \"dirt:rot-0:edge-nx\": {\n        \"x\": 5,\n        \"y\": 1\n    },\n    \"dirt:rot-0:edge-py\": {\n        \"x\": 6,\n        \"y\": 1\n    },\n    \"dirt:rot-0:edge-ny\": {\n        \"x\": 7,\n        \"y\": 1\n    },\n    \"dirt:rot-1:edge-px\": {\n        \"x\": 8,\n        \"y\": 1\n    },\n    \"dirt:rot-1:edge-nx\": {\n        \"x\": 9,\n        \"y\": 1\n    },\n    \"dirt:rot-1:edge-py\": {\n        \"x\": 10,\n        \"y\": 1\n    },\n    \"dirt:rot-1:edge-ny\": {\n        \"x\": 11,\n        \"y\": 1\n    },\n    \"dirt:rot-2:edge-px\": {\n        \"x\": 12,\n        \"y\": 1\n    },\n    \"dirt:rot-2:edge-nx\": {\n        \"x\": 13,\n        \"y\": 1\n    },\n    \"dirt:rot-2:edge-py\": {\n        \"x\": 0,\n        \"y\": 2\n    },\n    \"dirt:rot-2:edge-ny\": {\n        \"x\": 1,\n        \"y\": 2\n    },\n    \"dirt:rot-3:edge-px\": {\n        \"x\": 2,\n        \"y\": 2\n    },\n    \"dirt:rot-3:edge-nx\": {\n        \"x\": 3,\n        \"y\": 2\n    },\n    \"dirt:rot-3:edge-py\": {\n        \"x\": 4,\n        \"y\": 2\n    },\n    \"dirt:rot-3:edge-ny\": {\n        \"x\": 5,\n        \"y\": 2\n    },\n    \"dry_grass\": {\n        \"x\": 6,\n        \"y\": 2\n    },\n    \"dry_grass:edge-px\": {\n        \"x\": 7,\n        \"y\": 2\n    },\n    \"dry_grass:edge-nx\": {\n        \"x\": 8,\n        \"y\": 2\n    },\n    \"dry_grass:edge-py\": {\n        \"x\": 9,\n        \"y\": 2\n    },\n    \"dry_grass:edge-ny\": {\n        \"x\": 10,\n        \"y\": 2\n    },\n    \"flowering_small_cactus\": {\n        \"x\": 11,\n        \"y\": 2\n    },\n    \"flowering_small_cactus:lr_flip\": {\n        \"x\": 12,\n        \"y\": 2\n    },\n    \"flower_a:color-0\": {\n        \"x\": 13,\n        \"y\": 2\n    },\n    \"flower_a:color-1\": {\n        \"x\": 0,\n        \"y\": 3\n    },\n    \"flower_a:color-2\": {\n        \"x\": 1,\n        \"y\": 3\n    },\n    \"flower_a:color-3\": {\n        \"x\": 2,\n        \"y\": 3\n    },\n    \"flower_a:color-4\": {\n        \"x\": 3,\n        \"y\": 3\n    },\n    \"flower_a:color-5\": {\n        \"x\": 4,\n        \"y\": 3\n    },\n    \"flower_a:color-0:lr_flip\": {\n        \"x\": 5,\n        \"y\": 3\n    },\n    \"flower_a:color-1:lr_flip\": {\n        \"x\": 6,\n        \"y\": 3\n    },\n    \"flower_a:color-2:lr_flip\": {\n        \"x\": 7,\n        \"y\": 3\n    },\n    \"flower_a:color-3:lr_flip\": {\n        \"x\": 8,\n        \"y\": 3\n    },\n    \"flower_a:color-4:lr_flip\": {\n        \"x\": 9,\n        \"y\": 3\n    },\n    \"flower_a:color-5:lr_flip\": {\n        \"x\": 10,\n        \"y\": 3\n    },\n    \"grass\": {\n        \"x\": 11,\n        \"y\": 3\n    },\n    \"grass:edge-px\": {\n        \"x\": 12,\n        \"y\": 3\n    },\n    \"grass:edge-nx\": {\n        \"x\": 13,\n        \"y\": 3\n    },\n    \"grass:edge-py\": {\n        \"x\": 0,\n        \"y\": 4\n    },\n    \"grass:edge-ny\": {\n        \"x\": 1,\n        \"y\": 4\n    },\n    \"large_stones\": {\n        \"x\": 2,\n        \"y\": 4\n    },\n    \"large_stones:lr_flip\": {\n        \"x\": 3,\n        \"y\": 4\n    },\n    \"lava\": {\n        \"x\": 4,\n        \"y\": 4\n    },\n    \"oak_trunk\": {\n        \"x\": 5,\n        \"y\": 4\n    },\n    \"oak_trunk:lr_flip\": {\n        \"x\": 6,\n        \"y\": 4\n    },\n    \"oak_tree:sub-0_0\": {\n        \"x\": 7,\n        \"y\": 4\n    },\n    \"oak_tree:sub-1_0\": {\n        \"x\": 8,\n        \"y\": 4\n    },\n    \"oak_tree:sub-2_0\": {\n        \"x\": 9,\n        \"y\": 4\n    },\n    \"oak_tree:sub-0_1\": {\n        \"x\": 10,\n        \"y\": 4\n    },\n    \"oak_tree:sub-1_1\": {\n        \"x\": 11,\n        \"y\": 4\n    },\n    \"oak_tree:sub-2_1\": {\n        \"x\": 12,\n        \"y\": 4\n    },\n    \"oak_tree:sub-0_2\": {\n        \"x\": 13,\n        \"y\": 4\n    },\n    \"oak_tree:sub-1_2\": {\n        \"x\": 0,\n        \"y\": 5\n    },\n    \"oak_tree:sub-2_2\": {\n        \"x\": 1,\n        \"y\": 5\n    },\n    \"oak_tree:sub-1_3\": {\n        \"x\": 2,\n        \"y\": 5\n    },\n    \"oak_tree:sub-1_4\": {\n        \"x\": 3,\n        \"y\": 5\n    },\n    \"orchid:frame-0:color-0\": {\n        \"x\": 4,\n        \"y\": 5\n    },\n    \"orchid:frame-0:color-1\": {\n        \"x\": 5,\n        \"y\": 5\n    },\n    \"orchid:frame-0:color-2\": {\n        \"x\": 6,\n        \"y\": 5\n    },\n    \"orchid:frame-0:color-3\": {\n        \"x\": 7,\n        \"y\": 5\n    },\n    \"orchid:frame-1:color-0\": {\n        \"x\": 8,\n        \"y\": 5\n    },\n    \"orchid:frame-1:color-1\": {\n        \"x\": 9,\n        \"y\": 5\n    },\n    \"orchid:frame-1:color-2\": {\n        \"x\": 10,\n        \"y\": 5\n    },\n    \"orchid:frame-1:color-3\": {\n        \"x\": 11,\n        \"y\": 5\n    },\n    \"orchid:frame-2:color-0\": {\n        \"x\": 12,\n        \"y\": 5\n    },\n    \"orchid:frame-2:color-1\": {\n        \"x\": 13,\n        \"y\": 5\n    },\n    \"orchid:frame-2:color-2\": {\n        \"x\": 0,\n        \"y\": 6\n    },\n    \"orchid:frame-2:color-3\": {\n        \"x\": 1,\n        \"y\": 6\n    },\n    \"orchid:frame-3:color-0\": {\n        \"x\": 2,\n        \"y\": 6\n    },\n    \"orchid:frame-3:color-1\": {\n        \"x\": 3,\n        \"y\": 6\n    },\n    \"orchid:frame-3:color-2\": {\n        \"x\": 4,\n        \"y\": 6\n    },\n    \"orchid:frame-3:color-3\": {\n        \"x\": 5,\n        \"y\": 6\n    },\n    \"orchid:frame-0:color-0:lr_flip\": {\n        \"x\": 6,\n        \"y\": 6\n    },\n    \"orchid:frame-0:color-1:lr_flip\": {\n        \"x\": 7,\n        \"y\": 6\n    },\n    \"orchid:frame-0:color-2:lr_flip\": {\n        \"x\": 8,\n        \"y\": 6\n    },\n    \"orchid:frame-0:color-3:lr_flip\": {\n        \"x\": 9,\n        \"y\": 6\n    },\n    \"orchid:frame-1:color-0:lr_flip\": {\n        \"x\": 10,\n        \"y\": 6\n    },\n    \"orchid:frame-1:color-1:lr_flip\": {\n        \"x\": 11,\n        \"y\": 6\n    },\n    \"orchid:frame-1:color-2:lr_flip\": {\n        \"x\": 12,\n        \"y\": 6\n    },\n    \"orchid:frame-1:color-3:lr_flip\": {\n        \"x\": 13,\n        \"y\": 6\n    },\n    \"orchid:frame-2:color-0:lr_flip\": {\n        \"x\": 0,\n        \"y\": 7\n    },\n    \"orchid:frame-2:color-1:lr_flip\": {\n        \"x\": 1,\n        \"y\": 7\n    },\n    \"orchid:frame-2:color-2:lr_flip\": {\n        \"x\": 2,\n        \"y\": 7\n    },\n    \"orchid:frame-2:color-3:lr_flip\": {\n        \"x\": 3,\n        \"y\": 7\n    },\n    \"orchid:frame-3:color-0:lr_flip\": {\n        \"x\": 4,\n        \"y\": 7\n    },\n    \"orchid:frame-3:color-1:lr_flip\": {\n        \"x\": 5,\n        \"y\": 7\n    },\n    \"orchid:frame-3:color-2:lr_flip\": {\n        \"x\": 6,\n        \"y\": 7\n    },\n    \"orchid:frame-3:color-3:lr_flip\": {\n        \"x\": 7,\n        \"y\": 7\n    },\n    \"palm_tree:sub-0_0\": {\n        \"x\": 8,\n        \"y\": 7\n    },\n    \"palm_tree:sub-0_1\": {\n        \"x\": 9,\n        \"y\": 7\n    },\n    \"palm_tree:sub-0_2\": {\n        \"x\": 10,\n        \"y\": 7\n    },\n    \"palm_tree:sub-0_3\": {\n        \"x\": 11,\n        \"y\": 7\n    },\n    \"poppy\": {\n        \"x\": 12,\n        \"y\": 7\n    },\n    \"poppy:lr_flip\": {\n        \"x\": 13,\n        \"y\": 7\n    },\n    \"sand:rot-0\": {\n        \"x\": 0,\n        \"y\": 8\n    },\n    \"sand:rot-1\": {\n        \"x\": 1,\n        \"y\": 8\n    },\n    \"sand:rot-2\": {\n        \"x\": 2,\n        \"y\": 8\n    },\n    \"sand:rot-3\": {\n        \"x\": 3,\n        \"y\": 8\n    },\n    \"sand:rot-0:edge-px\": {\n        \"x\": 4,\n        \"y\": 8\n    },\n    \"sand:rot-0:edge-nx\": {\n        \"x\": 5,\n        \"y\": 8\n    },\n    \"sand:rot-0:edge-py\": {\n        \"x\": 6,\n        \"y\": 8\n    },\n    \"sand:rot-0:edge-ny\": {\n        \"x\": 7,\n        \"y\": 8\n    },\n    \"sand:rot-1:edge-px\": {\n        \"x\": 8,\n        \"y\": 8\n    },\n    \"sand:rot-1:edge-nx\": {\n        \"x\": 9,\n        \"y\": 8\n    },\n    \"sand:rot-1:edge-py\": {\n        \"x\": 10,\n        \"y\": 8\n    },\n    \"sand:rot-1:edge-ny\": {\n        \"x\": 11,\n        \"y\": 8\n    },\n    \"sand:rot-2:edge-px\": {\n        \"x\": 12,\n        \"y\": 8\n    },\n    \"sand:rot-2:edge-nx\": {\n        \"x\": 13,\n        \"y\": 8\n    },\n    \"sand:rot-2:edge-py\": {\n        \"x\": 0,\n        \"y\": 9\n    },\n    \"sand:rot-2:edge-ny\": {\n        \"x\": 1,\n        \"y\": 9\n    },\n    \"sand:rot-3:edge-px\": {\n        \"x\": 2,\n        \"y\": 9\n    },\n    \"sand:rot-3:edge-nx\": {\n        \"x\": 3,\n        \"y\": 9\n    },\n    \"sand:rot-3:edge-py\": {\n        \"x\": 4,\n        \"y\": 9\n    },\n    \"sand:rot-3:edge-ny\": {\n        \"x\": 5,\n        \"y\": 9\n    },\n    \"small_stones\": {\n        \"x\": 6,\n        \"y\": 9\n    },\n    \"small_stones:lr_flip\": {\n        \"x\": 7,\n        \"y\": 9\n    },\n    \"short_grass:mvar-0\": {\n        \"x\": 8,\n        \"y\": 9\n    },\n    \"short_grass:mvar-1\": {\n        \"x\": 9,\n        \"y\": 9\n    },\n    \"short_grass:mvar-0:lr_flip\": {\n        \"x\": 10,\n        \"y\": 9\n    },\n    \"short_grass:mvar-1:lr_flip\": {\n        \"x\": 11,\n        \"y\": 9\n    },\n    \"short_dry_grass:mvar-0\": {\n        \"x\": 12,\n        \"y\": 9\n    },\n    \"short_dry_grass:mvar-1\": {\n        \"x\": 13,\n        \"y\": 9\n    },\n    \"short_dry_grass:mvar-0:lr_flip\": {\n        \"x\": 0,\n        \"y\": 10\n    },\n    \"short_dry_grass:mvar-1:lr_flip\": {\n        \"x\": 1,\n        \"y\": 10\n    },\n    \"long_dry_grass:mvar-0\": {\n        \"x\": 2,\n        \"y\": 10\n    },\n    \"long_dry_grass:mvar-0:lr_flip\": {\n        \"x\": 3,\n        \"y\": 10\n    },\n    \"long_grass:mvar-0\": {\n        \"x\": 4,\n        \"y\": 10\n    },\n    \"long_grass:mvar-0:lr_flip\": {\n        \"x\": 5,\n        \"y\": 10\n    },\n    \"medium_bush\": {\n        \"x\": 6,\n        \"y\": 10\n    },\n    \"medium_bush:lr_flip\": {\n        \"x\": 7,\n        \"y\": 10\n    },\n    \"small_bush\": {\n        \"x\": 8,\n        \"y\": 10\n    },\n    \"small_bush:lr_flip\": {\n        \"x\": 9,\n        \"y\": 10\n    },\n    \"stone:rot-0\": {\n        \"x\": 10,\n        \"y\": 10\n    },\n    \"stone:rot-1\": {\n        \"x\": 11,\n        \"y\": 10\n    },\n    \"stone:rot-2\": {\n        \"x\": 12,\n        \"y\": 10\n    },\n    \"stone:rot-3\": {\n        \"x\": 13,\n        \"y\": 10\n    },\n    \"stone:rot-0:edge-px\": {\n        \"x\": 0,\n        \"y\": 11\n    },\n    \"stone:rot-0:edge-nx\": {\n        \"x\": 1,\n        \"y\": 11\n    },\n    \"stone:rot-0:edge-py\": {\n        \"x\": 2,\n        \"y\": 11\n    },\n    \"stone:rot-0:edge-ny\": {\n        \"x\": 3,\n        \"y\": 11\n    },\n    \"stone:rot-1:edge-px\": {\n        \"x\": 4,\n        \"y\": 11\n    },\n    \"stone:rot-1:edge-nx\": {\n        \"x\": 5,\n        \"y\": 11\n    },\n    \"stone:rot-1:edge-py\": {\n        \"x\": 6,\n        \"y\": 11\n    },\n    \"stone:rot-1:edge-ny\": {\n        \"x\": 7,\n        \"y\": 11\n    },\n    \"stone:rot-2:edge-px\": {\n        \"x\": 8,\n        \"y\": 11\n    },\n    \"stone:rot-2:edge-nx\": {\n        \"x\": 9,\n        \"y\": 11\n    },\n    \"stone:rot-2:edge-py\": {\n        \"x\": 10,\n        \"y\": 11\n    },\n    \"stone:rot-2:edge-ny\": {\n        \"x\": 11,\n        \"y\": 11\n    },\n    \"stone:rot-3:edge-px\": {\n        \"x\": 12,\n        \"y\": 11\n    },\n    \"stone:rot-3:edge-nx\": {\n        \"x\": 13,\n        \"y\": 11\n    },\n    \"stone:rot-3:edge-py\": {\n        \"x\": 0,\n        \"y\": 12\n    },\n    \"stone:rot-3:edge-ny\": {\n        \"x\": 1,\n        \"y\": 12\n    },\n    \"sunflowers\": {\n        \"x\": 2,\n        \"y\": 12\n    },\n    \"sunflowers:lr_flip\": {\n        \"x\": 3,\n        \"y\": 12\n    },\n    \"sword_man:frame-0\": {\n        \"x\": 4,\n        \"y\": 12\n    },\n    \"sword_man:frame-1\": {\n        \"x\": 5,\n        \"y\": 12\n    },\n    \"sword_man:frame-2\": {\n        \"x\": 6,\n        \"y\": 12\n    },\n    \"sword_man:frame-3\": {\n        \"x\": 7,\n        \"y\": 12\n    },\n    \"tiny_stones\": {\n        \"x\": 8,\n        \"y\": 12\n    },\n    \"tiny_stones:lr_flip\": {\n        \"x\": 9,\n        \"y\": 12\n    },\n    \"water:frame-0\": {\n        \"x\": 10,\n        \"y\": 12\n    },\n    \"water:frame-1\": {\n        \"x\": 11,\n        \"y\": 12\n    },\n    \"water:frame-2\": {\n        \"x\": 12,\n        \"y\": 12\n    },\n    \"water:frame-3\": {\n        \"x\": 13,\n        \"y\": 12\n    },\n    \"water:frame-4\": {\n        \"x\": 0,\n        \"y\": 13\n    },\n    \"water:frame-5\": {\n        \"x\": 1,\n        \"y\": 13\n    }\n};\n\n\n//# sourceURL=webpack:///./renderer/tileset.ts?");

/***/ }),

/***/ "./renderer/types.ts":
/*!***************************!*\
  !*** ./renderer/types.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TileSet = void 0;\nvar TileSet;\n(function (TileSet) {\n    TileSet[\"main\"] = \"main\";\n})(TileSet || (exports.TileSet = TileSet = {}));\n\n\n//# sourceURL=webpack:///./renderer/types.ts?");

/***/ }),

/***/ "./renderer/utils.ts":
/*!***************************!*\
  !*** ./renderer/utils.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CreateRenderTile = void 0;\nconst tileset_1 = __webpack_require__(/*! ./tileset */ \"./renderer/tileset.ts\");\nconst types_1 = __webpack_require__(/*! ./types */ \"./renderer/types.ts\");\nconst CreateRenderTile = ({ worldPosition, tilename }) => {\n    if (tileset_1.TILENAME_TO_TILESET_INDEX_MAP[tilename] === undefined) {\n        throw new Error(`Invalid tilename ${tilename}`);\n    }\n    return {\n        worldPosition,\n        tileIndex: tileset_1.TILENAME_TO_TILESET_INDEX_MAP[tilename],\n        tileset: types_1.TileSet.main\n    };\n};\nexports.CreateRenderTile = CreateRenderTile;\n\n\n//# sourceURL=webpack:///./renderer/utils.ts?");

/***/ }),

/***/ "./world/main.ts":
/*!***********************!*\
  !*** ./world/main.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CreateWorld = exports.SurfaceTiles = void 0;\nconst math_1 = __webpack_require__(/*! ../miscellaneous/math */ \"./miscellaneous/math.ts\");\nconst perlin_noise_1 = __webpack_require__(/*! ../miscellaneous/perlin_noise */ \"./miscellaneous/perlin_noise.ts\");\nconst pos_3d_1 = __webpack_require__(/*! ../miscellaneous/pos_3d */ \"./miscellaneous/pos_3d.ts\");\nconst weighted_random_1 = __webpack_require__(/*! ../miscellaneous/weighted_random */ \"./miscellaneous/weighted_random.ts\");\nconst types_1 = __webpack_require__(/*! ./types */ \"./world/types.ts\");\nexports.SurfaceTiles = [\n    types_1.TileType.water,\n    types_1.TileType.sand,\n    types_1.TileType.dirt,\n    types_1.TileType.dryGrass,\n    types_1.TileType.grass,\n    types_1.TileType.stone,\n    types_1.TileType.lava\n];\nconst CreateWorld = () => {\n    let _cursorWorldPosition = null;\n    let _tiles = [];\n    const SetCursorWorldPosition = (cursorWorldPosition) => {\n        _cursorWorldPosition = cursorWorldPosition;\n    };\n    const GetCursorWorldPosition = () => {\n        return _cursorWorldPosition;\n    };\n    const GetTile = (position) => {\n        const tile = _tiles.find(tile => tile.p.x === position.x &&\n            tile.p.y === position.y &&\n            tile.p.z === position.z);\n        return tile;\n    };\n    const GetSurfaceTile = (position) => {\n        for (let z = 4; z >= 0; z--) {\n            const tile = _tiles.find(tile => (0, pos_3d_1.Pos3dEquals)({ x: position.x, y: position.y, z }, (0, pos_3d_1.Pos3dScalarOperation)(tile.p, Math.floor)));\n            if (tile !== undefined) {\n                // if player cannot be placed on surface say position invalid\n                if (exports.SurfaceTiles.includes(tile.tileType)) {\n                    return tile;\n                }\n                return undefined;\n            }\n        }\n        return undefined;\n    };\n    const GetTiles = () => {\n        return _tiles;\n    };\n    const SetTiles = (tiles) => {\n        _tiles = tiles;\n    };\n    const camelToSnake = (camelCase) => camelCase.replace(/[A-Z]/g, match => `_${match.toLowerCase()}`);\n    const GenerateTiles = ({ landAxialRadius = 1, worldAxialRadius = 12 } = {}) => {\n        let tiles = [];\n        const perlin1 = (0, perlin_noise_1.CreatePerlinNoise)();\n        const perlin2 = (0, perlin_noise_1.CreatePerlinNoise)();\n        const positions = [];\n        for (let y = -worldAxialRadius; y <= worldAxialRadius; y += 1) {\n            for (let x = -worldAxialRadius; x <= worldAxialRadius; x += 1) {\n                positions.push({ x, y });\n            }\n        }\n        for (let y = -worldAxialRadius; y <= worldAxialRadius; y += 1) {\n            for (let x = -worldAxialRadius; x <= worldAxialRadius; x += 1) {\n                tiles.push({ p: { x, y, z: -1 }, tileType: types_1.TileType.sand });\n            }\n        }\n        const offset = worldAxialRadius; // Perlin noise does not like negative numbers\n        const octaves = 4;\n        for (const p of positions) {\n            let frequency = 16;\n            const n1 = perlin1.noise({\n                x: (p.x + offset) / frequency,\n                y: (p.y + offset) / frequency,\n                octaves\n            });\n            frequency = 8;\n            const n2 = perlin2.noise({\n                x: (p.x + offset) / frequency,\n                y: (p.y + offset) / frequency,\n                octaves\n            });\n            let tileType = types_1.TileType.grass;\n            const borderDistance = landAxialRadius + n2;\n            if (Math.abs(p.x) > borderDistance || Math.abs(p.y) > borderDistance) {\n                tileType = types_1.TileType.water;\n            }\n            else if (n1 < -0.2) {\n                tileType = types_1.TileType.water;\n            }\n            else if (n1 < -0.1) {\n                tileType = types_1.TileType.sand;\n            }\n            else if (n1 < 0) {\n                tileType = types_1.TileType.dirt;\n            }\n            else if (n1 < 0.2) {\n                tileType = types_1.TileType.dryGrass;\n            }\n            else if (n1 < 0.4) {\n                tileType = types_1.TileType.grass;\n            }\n            else if (n1 < 0.7) {\n                tileType = types_1.TileType.stone;\n            }\n            else if (n1 < 1.0) {\n                tileType = types_1.TileType.lava;\n            }\n            let wz = 0;\n            if (tileType === types_1.TileType.water) {\n                wz = 0;\n            }\n            else if (n1 < 0.2) {\n                wz = Math.round((0, math_1.linInterp)(0, 0.5, -0.1, 0.2, n1) * 2) / 2;\n            }\n            else if (n1 < 0.4) {\n                wz = Math.round((0, math_1.linInterp)(0.5, 1.5, 0.2, 0.4, n1) * 2) / 2;\n            }\n            else if (n1 < 1.0) {\n                wz = Math.round((0, math_1.linInterp)(1, 2, 0.4, 1.0, n1) * 2) / 2;\n            }\n            for (const zz of (0, math_1.GenIntsToFloat)(wz)) {\n                tiles.push({\n                    p: { x: p.x, y: p.y, z: zz },\n                    tileType\n                });\n            }\n            const AddDecorativeTile = (tileType, z = 1) => {\n                tiles.push({\n                    p: { x: p.x, y: p.y, z: wz + z },\n                    tileType\n                });\n            };\n            const r = Math.random();\n            const WeightedTileGeneration = (weightedTiles) => {\n                (0, weighted_random_1.WeightedRandomCallbacks)(r, weightedTiles.map(weightedTile => ({\n                    weight: weightedTile.weight,\n                    callback: () => {\n                        for (const tt of weightedTile.tileTypes) {\n                            AddDecorativeTile(tt);\n                        }\n                    }\n                })));\n            };\n            if (tileType === types_1.TileType.grass) {\n                WeightedTileGeneration([\n                    { weight: 0.05, tileTypes: [types_1.TileType.shortGrass, types_1.TileType.orchid] },\n                    { weight: 0.05, tileTypes: [types_1.TileType.shortGrass, types_1.TileType.poppy] },\n                    { weight: 0.05, tileTypes: [types_1.TileType.shortGrass, types_1.TileType.oakTrunk] },\n                    {\n                        weight: 0.05,\n                        tileTypes: [types_1.TileType.shortGrass, types_1.TileType.smallStones]\n                    },\n                    { weight: 0.05, tileTypes: [types_1.TileType.shortGrass, types_1.TileType.oakTree] },\n                    { weight: 0.1, tileTypes: [types_1.TileType.shortGrass, types_1.TileType.daisies] },\n                    { weight: 0.05, tileTypes: [types_1.TileType.longGrass] },\n                    {\n                        weight: 0.03,\n                        tileTypes: [types_1.TileType.shortGrass, types_1.TileType.tinyStones]\n                    },\n                    {\n                        weight: 0.05,\n                        tileTypes: [types_1.TileType.shortGrass, types_1.TileType.smallBush]\n                    },\n                    {\n                        weight: 0.05,\n                        tileTypes: [types_1.TileType.shortGrass, types_1.TileType.mediumBush]\n                    },\n                    {\n                        weight: 0.47,\n                        tileTypes: [types_1.TileType.shortGrass]\n                    }\n                ]);\n            }\n            else if (tileType === types_1.TileType.dryGrass) {\n                WeightedTileGeneration([\n                    { weight: 0.1, tileTypes: [types_1.TileType.shortDryGrass, types_1.TileType.plant] },\n                    { weight: 0.2, tileTypes: [types_1.TileType.longDryGrass] },\n                    {\n                        weight: 0.1,\n                        tileTypes: [types_1.TileType.shortDryGrass, types_1.TileType.sunflowers]\n                    },\n                    { weight: 0.6, tileTypes: [types_1.TileType.shortDryGrass] }\n                ]);\n            }\n            else if (tileType === types_1.TileType.sand) {\n                WeightedTileGeneration([\n                    { weight: 0.1, tileTypes: [types_1.TileType.cactus] },\n                    { weight: 0.15, tileTypes: [types_1.TileType.palmTree] },\n                    { weight: 0.75, tileTypes: [] }\n                ]);\n            }\n            else if (tileType === types_1.TileType.stone) {\n                WeightedTileGeneration([\n                    { weight: 0.05, tileTypes: [types_1.TileType.largeStones] },\n                    { weight: 0.05, tileTypes: [types_1.TileType.smallStones] },\n                    { weight: 0.1, tileTypes: [types_1.TileType.tinyStones] },\n                    { weight: 0.8, tileTypes: [] }\n                ]);\n            }\n        }\n        _tiles = tiles;\n        const allowedLavaNeighbours = [types_1.TileType.stone, types_1.TileType.lava];\n        // only allow lava tiles which are surrounded by stone\n        for (let tile of _tiles) {\n            if (tile.tileType === types_1.TileType.lava) {\n                const neighbours = [\n                    { p: { x: 0, y: 0, z: 1 }, tileTypes: [undefined] },\n                    {\n                        p: { x: 1, y: 0, z: 0 },\n                        tileTypes: allowedLavaNeighbours\n                    },\n                    {\n                        p: { x: 0, y: 1, z: 0 },\n                        tileTypes: allowedLavaNeighbours\n                    },\n                    {\n                        p: { x: -1, y: 0, z: 0 },\n                        tileTypes: allowedLavaNeighbours\n                    },\n                    {\n                        p: { x: 0, y: -1, z: 0 },\n                        tileTypes: allowedLavaNeighbours\n                    }\n                ];\n                for (let neighbour of neighbours) {\n                    const other = GetTile({\n                        x: tile.p.x + neighbour.p.x,\n                        y: tile.p.y + neighbour.p.y,\n                        z: tile.p.z + neighbour.p.z\n                    });\n                    if (!neighbour.tileTypes.includes(other?.tileType)) {\n                        tile.tileType = types_1.TileType.stone;\n                        break;\n                    }\n                }\n            }\n        }\n        const edgedBlocks = [\n            types_1.TileType.dirt,\n            types_1.TileType.sand,\n            types_1.TileType.dryGrass,\n            types_1.TileType.stone,\n            types_1.TileType.grass\n        ];\n        const edgeTiles = [];\n        for (let tile of _tiles) {\n            if (!edgedBlocks.includes(tile.tileType)) {\n                continue;\n            }\n            const directions = [\n                { key: 'nx', dir: { x: -1, y: 0 } },\n                { key: 'px', dir: { x: 1, y: 0 } },\n                { key: 'py', dir: { x: 0, y: 1 } },\n                { key: 'ny', dir: { x: 0, y: -1 } }\n            ];\n            for (const { key, dir } of directions) {\n                const p = {\n                    x: tile.p.x + dir.x,\n                    y: tile.p.y + dir.y,\n                    z: tile.p.z\n                };\n                const neighbour = GetTile(p);\n                if (neighbour &&\n                    neighbour.tileType !== tile.tileType &&\n                    edgedBlocks.includes(neighbour.tileType)) {\n                    const tileEdge = {\n                        p: tile.p,\n                        tileType: `${camelToSnake(neighbour.tileType)}:edge-${key}` // hack for dynamic tiles\n                    };\n                    edgeTiles.push(tileEdge);\n                }\n            }\n        }\n        // console.log('tile length', _tiles.length)\n        _tiles.push(...edgeTiles);\n    };\n    return {\n        SetCursorWorldPosition,\n        GetCursorWorldPosition,\n        GetTile,\n        GetTiles,\n        SetTiles,\n        GenerateTiles,\n        GetSurfaceTile\n    };\n};\nexports.CreateWorld = CreateWorld;\n\n\n//# sourceURL=webpack:///./world/main.ts?");

/***/ }),

/***/ "./world/types.ts":
/*!************************!*\
  !*** ./world/types.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TileType = void 0;\nvar TileType;\n(function (TileType) {\n    TileType[\"dirt\"] = \"dirt\";\n    TileType[\"grass\"] = \"grass\";\n    TileType[\"stone\"] = \"stone\";\n    TileType[\"sand\"] = \"sand\";\n    TileType[\"water\"] = \"water\";\n    TileType[\"plant\"] = \"plant\";\n    TileType[\"cactus\"] = \"cactus\";\n    TileType[\"log\"] = \"log\";\n    TileType[\"canopy\"] = \"canopy\";\n    TileType[\"dryGrass\"] = \"dryGrass\";\n    TileType[\"smallStones\"] = \"smallStones\";\n    TileType[\"largeStones\"] = \"largeStones\";\n    TileType[\"lava\"] = \"lava\";\n    TileType[\"orchid\"] = \"orchid\";\n    TileType[\"poppy\"] = \"poppy\";\n    TileType[\"palmTree\"] = \"palmTree\";\n    TileType[\"shortGrass\"] = \"shortGrass\";\n    TileType[\"shortDryGrass\"] = \"shortDryGrass\";\n    TileType[\"oakTrunk\"] = \"oakTrunk\";\n    TileType[\"longDryGrass\"] = \"longDryGrass\";\n    TileType[\"longGrass\"] = \"longGrass\";\n    TileType[\"oakTree\"] = \"oakTree\";\n    TileType[\"daisies\"] = \"daisies\";\n    TileType[\"tinyStones\"] = \"tinyStones\";\n    TileType[\"mediumBush\"] = \"mediumBush\";\n    TileType[\"smallBush\"] = \"smallBush\";\n    TileType[\"sunflowers\"] = \"sunflowers\";\n})(TileType || (exports.TileType = TileType = {}));\n\n\n//# sourceURL=webpack:///./world/types.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./main.ts");
/******/ 	
/******/ })()
;